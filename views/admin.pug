extends layout

block content
    .container-fluid.py-4
        //- =====================
        //- 1) Users Table
        //- =====================
        .row.mb-4
            .col
                .card.shadow-lg
                    .card-header.bg-gradient-primary.text-primary
                        h5.mb-0 User Statistics
                    .card-body
                        .table-responsive
                            table.table.table-hover.table-striped.align-middle
                                thead
                                    tr
                                        th User ID
                                        th Email
                                        th Name
                                        th Iter ID
                                        th Status
                                        th Created
                                        th Last Active
                                tbody
                                    each user in userList
                                        tr
                                            td.text-monospace= user.uuid.substring(0, 8) + '...'
                                            td= user.email
                                            td= `${user.first_name} ${user.last_name}`
                                            td= user.v2_iter_id
                                            td
                                                span.badge(class=(user.status === 'active' ? `bg-success` : 'bg-danger'))= user.status
                                            td= new Date(user.created_at).toLocaleDateString()
                                            td= new Date(user.updated_at).toLocaleDateString()


        //- =====================
        //- 2) Visitors Analytics
        //- =====================
        .row
            .col
                .card.shadow-lg
                    .card-header.bg-gradient-info.text-secondary
                        .d-flex.justify-content-between.align-items-center
                            h5.mb-0 Visitor Analytics
                            // Nav pills for different data sets
                            .nav-pills
                                button.btn.btn-sm.btn-outline-dark.mx-1(data-bs-toggle="tab", data-bs-target="#all-tab") All
                                button.btn.btn-sm.btn-outline-dark.mx-1(data-bs-toggle="tab", data-bs-target="#de-tab") DE
                                button.btn.btn-sm.btn-outline-dark.mx-1(data-bs-toggle="tab", data-bs-target="#us-tab") US
                                button.btn.btn-sm.btn-outline-dark.mx-1(data-bs-toggle="tab", data-bs-target="#domains-tab") Domains

                    .card-body
                        .tab-content
                            //- All Servers
                            #all-tab.tab-pane.fade.show.active
                                .row.mb-3
                                    .col
                                        h6.text-muted All servers combined
                                .row
                                    .col-md-6
                                        canvas#all-hourly-chart.chart-container
                                    .col-md-6
                                        canvas#all-daily-chart.chart-container
                                .row.mt-3
                                    .col-md-6
                                        canvas#all-geo-chart.chart-container
                                    .col-md-6
                                        ul.list-group#all-geo-list(style="max-height: 300px; overflow-y: auto;")

                            //- DE
                            #de-tab.tab-pane.fade
                                .row.mb-3
                                    .col
                                        h6.text-muted DE server data
                                .row
                                    .col-md-6
                                        canvas#de-hourly-chart.chart-container
                                    .col-md-6
                                        canvas#de-daily-chart.chart-container
                                .row.mt-3
                                    .col-md-6
                                        canvas#de-geo-chart.chart-container
                                    .col-md-6
                                        ul.list-group#de-geo-list(style="max-height: 300px; overflow-y: auto;")

                            //- US
                            #us-tab.tab-pane.fade
                                .row.mb-3
                                    .col
                                        h6.text-muted US server data
                                .row
                                    .col-md-6
                                        canvas#us-hourly-chart.chart-container
                                    .col-md-6
                                        canvas#us-daily-chart.chart-container
                                .row.mt-3
                                    .col-md-6
                                        canvas#us-geo-chart.chart-container
                                    .col-md-6
                                        ul.list-group#us-geo-list(style="max-height: 300px; overflow-y: auto;")

                            //- Domains
                            #domains-tab.tab-pane.fade
                                .row.mb-3
                                    .col-md-4
                                        input.form-control(type="search", placeholder="Filter domain...", id="domainSearchInput")
                                    .col-md-4
                                        select.form-select#serverFilter
                                            option(value="all" selected) All servers
                                            option(value="DE") DE
                                            option(value="US") US
                                    .col-md-4.text-end
                                        button.btn.btn-sm.btn-outline-secondary#sortDomainBtn Sort by Count
                                .table-responsive
                                    table.table.table-bordered.table-hover#domains-table
                                        thead
                                            tr
                                                th Domain
                                                th Server
                                                th Count
                                        tbody

    style.
        .card {
            border-radius: 1rem;
            overflow: hidden;
        }

        .chart-container {
            position: relative;
            height: 300px;
            width: 100%;
        }

        .data-point:hover {
            cursor: pointer;
            opacity: 0.8;
        }

    script.
        const deVisitorsData = !{JSON.stringify(deVisitorsData)}
        const usVisitorsData = !{JSON.stringify(usVisitorsData)}
        const allVisitorsData = !{JSON.stringify(allVisitorsData)}

        document.querySelectorAll('[data-bs-toggle="tab"]').forEach(button => {
            button.addEventListener('click', event => {
                const target = event.target.getAttribute('data-bs-target');
                document.querySelector(target).classList.add('show', 'active');
                document.querySelectorAll('.tab-pane').forEach(tab => {
                    if (tab.id !== target.slice(1)) {
                        tab.classList.remove('show', 'active');
                    }
                });
            });
        });

        document.addEventListener('DOMContentLoaded', function () {
            // -----------
            // CHART SETUP
            // -----------
            // Reusable chart config
            const baseChartOptions = {
                maintainAspectRatio: false,
                plugins: {
                    legend: {display: false},
                    tooltip: {
                        backgroundColor: 'rgba(0,0,0,0.9)',
                        titleFont: {size: 14},
                        bodyFont: {size: 12},
                        padding: 12,
                        displayColors: false
                    }
                },
                scales: {
                    x: {grid: {display: false}},
                    y: {beginAtZero: true, grid: {color: 'rgba(0,0,0,0.05)'}}
                }
            };

            // Helper to build data sets for hourly line chart
            function buildHourlyChartData(visitors) {
                if (!visitors || !visitors.length) {
                    return {labels: [], datasets: []};
                }
                const labels = Object.keys(visitors[0].requestHourlyCounts)
                    .sort()  // ensure chronological
                    .map(t => new Date(t).getHours() + ':00'); // just show hour

                // Each visitor => line
                const datasets = visitors.map(visitor => {
                    const sortedKeys = Object.keys(visitor.requestHourlyCounts).sort();
                    const data = sortedKeys.map(k => visitor.requestHourlyCounts[k]);
                    return {
                        label: `${visitor.ip} (${visitor.email || 'no email'})`,
                        data,
                        borderColor: randomColor(),
                        tension: 0.3,
                        fill: false
                    };
                });
                return {labels, datasets};
            }

            // Helper to build data sets for daily bar chart
            function buildDailyChartData(visitors) {
                if (!visitors || !visitors.length) {
                    return {labels: [], datasets: []};
                }
                const allDailyKeys = Object.keys(visitors[0].requestDailyCounts).sort();
                const labels = allDailyKeys.map(d => new Date(d).toLocaleDateString());
                // sum across all visitors
                const data = allDailyKeys.map(dKey => {
                    return visitors.reduce((sum, v) => sum + (v.requestDailyCounts[dKey] || 0), 0);
                });

                return {
                    labels,
                    datasets: [{
                        label: 'Daily Requests',
                        data,
                        backgroundColor: 'rgba(54, 162, 235, 0.8)'
                    }]
                };
            }

            // Helper to build geo chart (doughnut)
            function buildGeoChartData(visitors) {
                const counts = {};
                visitors.forEach(v => {
                    const loc = v.location || 'Unknown';
                    counts[loc] = (counts[loc] || 0) + totalRequests(v);
                });
                const labels = Object.keys(counts);
                const data = Object.values(counts);
                const bgColors = labels.map(() => randomColor());
                return {
                    labels,
                    datasets: [{
                        data,
                        backgroundColor: bgColors
                    }]
                };
            }

            // Helper to populate geo list
            function populateGeoList(visitors, listElementId) {
                const container = document.getElementById(listElementId);
                if (!container) return;
                container.innerHTML = ''; // clear old
                // group by location => sum requests
                const locationMap = {};
                visitors.forEach(v => {
                    const loc = v.location || 'Unknown';
                    locationMap[loc] = (locationMap[loc] || 0) + totalRequests(v);
                });
                // Convert to array
                const sortedLocations = Object.entries(locationMap).sort((a, b) => b[1] - a[1]);
                // Populate
                sortedLocations.forEach(([loc, count]) => {
                    const li = document.createElement('li');
                    li.className = 'list-group-item d-flex justify-content-between align-items-center';
                    li.innerHTML = `${loc}<span class="badge bg-primary rounded-pill">${count}</span>`;
                    container.appendChild(li);
                });
            }

            function randomColor() {
                return `hsl(${Math.random() * 360}, 70%, 50%)`;
            }

            function totalRequests(visitor) {
                return Object.values(visitor.requestHourlyCounts).reduce((a, b) => a + b, 0);
            }

            // Create the charts for each tab set
            // --- ALL
            createLineChart('all-hourly-chart', buildHourlyChartData(allVisitorsData));
            createBarChart('all-daily-chart', buildDailyChartData(allVisitorsData));
            createDoughnut('all-geo-chart', buildGeoChartData(allVisitorsData));
            populateGeoList(allVisitorsData, 'all-geo-list');

            // --- DE
            createLineChart('de-hourly-chart', buildHourlyChartData(deVisitorsData));
            createBarChart('de-daily-chart', buildDailyChartData(deVisitorsData));
            createDoughnut('de-geo-chart', buildGeoChartData(deVisitorsData));
            populateGeoList(deVisitorsData, 'de-geo-list');

            // --- US
            createLineChart('us-hourly-chart', buildHourlyChartData(usVisitorsData));
            createBarChart('us-daily-chart', buildDailyChartData(usVisitorsData));
            createDoughnut('us-geo-chart', buildGeoChartData(usVisitorsData));
            populateGeoList(usVisitorsData, 'us-geo-list');

            // -----------
            // DOMAINS TAB
            // -----------
            // Build single domain table for all visitors, or
            // if you want separate, you could do multiple.
            const domainTableBody = document.querySelector('#domains-table tbody');
            const all = [...allVisitorsData]; // array of visitors
            // Flatten out: each domain in each visitor => row
            let domainRows = [];
            all.forEach(visitor => {
                Object.entries(visitor.domains).forEach(([domain, count]) => {
                    domainRows.push({
                        domain,
                        server: visitor.server,
                        count
                    });
                });
            });

            // function to re-render domain table
            function renderDomainRows(rows) {
                domainTableBody.innerHTML = '';
                rows.forEach(r => {
                    const tr = document.createElement('tr');
                    tr.innerHTML = `
            <td>${r.domain}</td>
            <td>${r.server}</td>
            <td>${r.count}</td>
          `;
                    domainTableBody.appendChild(tr);
                });
            }

            renderDomainRows(domainRows);

            // ---- Filter / Sort
            const domainSearchInput = document.getElementById('domainSearchInput');
            const serverFilter = document.getElementById('serverFilter');
            const sortBtn = document.getElementById('sortDomainBtn');
            let sortDesc = false;

            function applyDomainFilters() {
                const searchVal = domainSearchInput.value.toLowerCase();
                const selectedServer = serverFilter.value; // 'all', 'DE', 'US'
                let filtered = domainRows.filter(r => {
                    const matchesSearch = r.domain.toLowerCase().includes(searchVal);
                    const matchesServer = (selectedServer === 'all') || (r.server === selectedServer);
                    return matchesSearch && matchesServer;
                });
                // sort
                if (sortDesc) {
                    filtered.sort((a, b) => b.count - a.count);
                } else {
                    filtered.sort((a, b) => a.count - b.count);
                }
                renderDomainRows(filtered);
            }

            // Hook up event listeners
            domainSearchInput.addEventListener('input', applyDomainFilters);
            serverFilter.addEventListener('change', applyDomainFilters);
            sortBtn.addEventListener('click', () => {
                sortDesc = !sortDesc;
                applyDomainFilters();
            });

            // -----------
            // Chart helpers
            // -----------
            function createLineChart(canvasId, data) {
                const ctx = document.getElementById(canvasId);
                if (!ctx) return;
                new Chart(ctx, {
                    type: 'line',
                    data: data,
                    options: {
                        ...baseChartOptions,
                        responsive: true,
                        interaction: {mode: 'index'}
                    }
                });
            }

            function createBarChart(canvasId, data) {
                const ctx = document.getElementById(canvasId);
                if (!ctx) return;
                new Chart(ctx, {
                    type: 'bar',
                    data: data,
                    options: {
                        ...baseChartOptions,
                        responsive: true,
                        scales: {
                            y: {ticks: {stepSize: 1, beginAtZero: true}}
                        }
                    }
                });
            }

            function createDoughnut(canvasId, data) {
                const ctx = document.getElementById(canvasId);
                if (!ctx) return;
                new Chart(ctx, {
                    type: 'doughnut',
                    data: data,
                    options: {
                        ...baseChartOptions,
                        cutout: '60%',
                        plugins: {
                            legend: {position: 'right'}
                        }
                    }
                });
            }
        });
