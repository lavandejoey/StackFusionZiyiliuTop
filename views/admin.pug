extends layout

block content
    .container-fluid.py-4
        //- Users Table Section
        .row.mb-4
            .col
                .card.shadow-lg
                    .card-header.bg-gradient-primary.text-primary
                        h5.mb-0 User Statistics
                    .card-body
                        .table-responsive
                            table.table.table-hover.table-striped.align-middle
                                thead
                                    tr
                                        th User ID
                                        th Email
                                        th Name
                                        th Iter ID
                                        th Status
                                        th Created
                                        th Last Active
                                tbody
                                    each user in userList
                                        tr
                                            td.text-monospace= user.uuid.substring(0, 8) + '...'
                                            td= user.email
                                            td= `${user.first_name} ${user.last_name}`
                                            td= user.v2_iter_id
                                            td
                                                span.badge(class=(user.status === 'active' ? `bg-success` : 'bg-danger'))= user.status
                                            td= new Date(user.created_at).toLocaleDateString()
                                            td= new Date(user.updated_at).toLocaleDateString()

        //- Visitors Analytics Section
        .row
            .col
                .card.shadow-lg
                    .card-header.bg-gradient-info.text-secondary
                        .d-flex.justify-content-between.align-items-center
                            h5.mb-0 Visitor Analytics
                            .nav-pills
                                button.btn.btn-sm.btn-outline-light.mx-1(data-bs-toggle="tab" data-bs-target="#hourly-tab") Hourly
                                button.btn.btn-sm.btn-outline-light.mx-1(data-bs-toggle="tab" data-bs-target="#daily-tab") Daily
                                button.btn.btn-sm.btn-outline-light.mx-1(data-bs-toggle="tab" data-bs-target="#geo-tab") Geographic
                    .card-body
                        .tab-content
                            #hourly-tab.tab-pane.fade.show.active
                                canvas#hourly-chart
                            #daily-tab.tab-pane.fade
                                canvas#daily-chart
                            #geo-tab.tab-pane.fade
                                .row
                                    .col-md-8
                                        canvas#geo-chart
                                    .col-md-4
                                        .list-group#geo-list(style="max-height: 400px; overflow-y: auto;")

    style.
        .card {
            border-radius: 1rem;
            overflow: hidden;
        }

        .chart-container {
            position: relative;
            height: 60vh;
            width: 100%;
        }

        .data-point:hover {
            cursor: pointer;
            opacity: 0.8;
        }

    script.
        const visitors = !{JSON.stringify(visitors)};

        document.addEventListener('DOMContentLoaded', function () {
            //- Chart configuration
            const chartConfig = {
                maintainAspectRatio: false,
                plugins: {
                    legend: {display: false},
                    tooltip: {
                        backgroundColor: 'rgba(0,0,0,0.9)',
                        titleFont: {size: 14},
                        bodyFont: {size: 12},
                        padding: 12,
                        displayColors: false
                    }
                },
                scales: {
                    x: {grid: {display: false}},
                    y: {beginAtZero: true, grid: {color: 'rgba(0,0,0,0.05)'}}
                }
            };

            const hourlyChart = new Chart(document.getElementById('hourly-chart'), {
                type: 'line',
                data: formatHourlyData(),
                options: {
                    ...chartConfig,
                    responsive: true,
                    interaction: {mode: 'index'}
                }
            });

            const dailyChart = new Chart(document.getElementById('daily-chart'), {
                type: 'bar',
                data: formatDailyData(),
                options: {
                    ...chartConfig,
                    responsive: true,
                    scales: {y: {ticks: {stepSize: 1}}}
                }
            });

            const geoChart = new Chart(document.getElementById('geo-chart'), {
                type: 'doughnut',
                data: formatGeoData(),
                options: {
                    ...chartConfig,
                    cutout: '60%',
                    plugins: {legend: {position: 'right'}}
                }
            });

            //- Update geo list
            const geoList = document.getElementById('geo-list');
            visitors.forEach(visitor => {
                const item = document.createElement('a');
                item.className = 'list-group-item list-group-item-action d-flex justify-content-between';
                item.innerHTML = `
                    ${visitor.location}
                    <span class="badge bg-primary rounded-pill">${Object.values(visitor.requestHourlyCounts).reduce((a, b) => a + b, 0)}</span>
                `;
                geoList.appendChild(item);
            });

            function formatHourlyData() {
                const datasets = visitors.map(visitor => ({
                    label: `${visitor.ip} (${visitor.location})`,
                    data: Object.values(visitor.requestHourlyCounts),
                    borderColor: `#${Math.floor(Math.random() * 16777215).toString(16)}`,
                    tension: 0.3,
                    fill: false
                }));

                return {
                    labels: Object.keys(visitors[0].requestHourlyCounts).map(t =>
                        new Date(t).toLocaleTimeString([], {hour: '2-digit'})),
                    datasets
                };
            }

            function formatDailyData() {
                const labels = Object.keys(visitors[0].requestDailyCounts);
                const data = labels.map(date =>
                    visitors.reduce((sum, visitor) => sum + (visitor.requestDailyCounts[date] || 0), 0));

                return {
                    labels: labels.map(d => new Date(d).toLocaleDateString()),
                    datasets: [{
                        label: 'Daily Requests',
                        data,
                        backgroundColor: 'rgba(54, 162, 235, 0.8)'
                    }]
                };
            }

            function formatGeoData() {
                const locations = {};
                visitors.forEach(visitor => {
                    locations[visitor.location] = (locations[visitor.location] || 0) + 1;
                });

                return {
                    labels: Object.keys(locations),
                    datasets: [{
                        data: Object.values(locations),
                        backgroundColor: Object.keys(locations).map(() =>
                            `hsl(${Math.random() * 360}, 70%, 50%)`)
                    }]
                };
            }

            //- Handle window resize
            window.addEventListener('resize', () => {
                [hourlyChart, dailyChart, geoChart].forEach(chart => chart.resize());
            });
        });